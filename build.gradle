import java.sql.Connection
import java.sql.ResultSet
import java.sql.Statement

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.5.1/userguide/tutorial_java_projects.html
 */


plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application
    id 'application'
    id 'nu.studer.jooq' version '4.1'
    id "org.flywaydb.flyway" version "6.2.0"
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.4'
    compileOnly 'org.projectlombok:lombok:1.18.4'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.2.4'
    compile 'org.jooq:jooq'
    runtime 'com.h2database:h2:1.4.199'
    jooqRuntime 'com.h2database:h2:1.4.199'
    compile 'org.flywaydb:flyway-core:6.2.0'
    compile group: 'com.zaxxer', name: 'HikariCP', version: '3.4.2'
    testCompile "org.assertj:assertj-core:3.10.0"
    compile group: 'com.sparkjava', name: 'spark-core', version: '2.9.1'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.2'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

}

application {
    // Define the main class for the application
    mainClassName = 'p2p.App'
}

jooq {
    sample(sourceSets.main) {
        jdbc {
            driver = 'org.h2.Driver'
            url = 'jdbc:h2:~/test'
            user = 'sa'
            password = ''
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            database {
                name = 'org.jooq.meta.h2.H2Database'
                includes = '.*'
                excludes = ''
            }
            generate{
                relations = false
                deprecated = false
                records = true
                immutablePojos = true
                fluentSetters = true
                daos=false
                pojos=false
            }
            target {
                directory ='src/main/generated'
                packageName = ''
            }
        }
    }
}
tasks.generateSampleJooqSchemaSource.with {
    def out = new ByteArrayOutputStream()
    javaExecSpec = { JavaExecSpec s ->
        s.standardOutput = out
        s.errorOutput = out
        s.ignoreExitValue = true
        s.jvmArgs '-Xmx512M'
    }
    execResultHandler = { ExecResult r ->
        if (r.exitValue != 0) {
            throw new RuntimeException('jOOQ source code generation failed:\n\n' + out.toString())
        }
    }
}

flyway {
    url = 'jdbc:h2:~/test'
    user = 'sa'
    password = ''
    schemas = ['public']
    locations = ["filesystem:$project.projectDir/src/main/resources/db/migration"]
}

generateSampleJooqSchemaSource.dependsOn flywayMigrate
